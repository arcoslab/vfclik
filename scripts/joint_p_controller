#!/usr/bin/env python
# Copyright (c) 2009 Technische Universitaet Muenchen, Informatik Lehrstuhl IX.
# Authors: Federico Ruiz-Ugalde <memeruiz at gmail.com>
#          Alexis Maldonado <maldonad at in.tum.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import yarp
from builtins import range
from numpy import array
import sys
import signal
from arcospyu.config_parser import ConfigFileParser
from arcospyu.yarp_tools.yarp_comm_helpers import ArcosYarp


def signal_handler(sig, frame):
    print("Terminating ", __file__)
    global stop
    stop = True


stop = False
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


def change_ps_name(name):
    """Change process name as used by ps(1) and killall(1)."""
    try:
        import ctypes
        libc = ctypes.CDLL('libc.so.6')
        libc.prctl(15, name, 0, 0, 0)
    except Exception:
        pass


change_ps_name('jointPController.py')


config_parser = ConfigFileParser(sys.argv)
options, args, config = config_parser.get_all()

kp = 1.5  # 0.8
kp = config.jpctrl_kp
delta = 0.087  # distance to have reached

yarp.Network.init()
arm_base_name=config.robotarm_portbasename
module_base_name=arm_base_name+"/jpctrl"
yarp_ctrl=ArcosYarp(ports_name_prefix=options.namespace, module_name_prefix=module_base_name)

robotbn = options.namespace + config.robotarm_portbasename
basename =  robotbn + "/jpctrl"
inPort = yarp_ctrl.create_yarp_port("/in", strict=False)
refPort = yarp_ctrl.create_yarp_port("/ref", strict=False)
outPort = yarp_ctrl.create_yarp_port("/out", input_port=False)

atGoalPort = yarp_ctrl.create_yarp_port("/at_goal", input_port=False)

yconnect = yarp.Network.connect
cstyle = yarp.ContactStyle()
cstyle.persistent = True
yarp_ctrl.connect(outPort, arm_base_name+"/bridge", "/jointcmd")
#yconnect(outpn, robotbn + "/bridge/jointcmd", cstyle)


def check_limits(ref, cur_pos):
    limits = config.updateJntLimits(cur_pos)
    ref_out = list(ref)
    for i in range(len(limits)):
        if (ref[i] < limits[i][0]):
            print("Limiting low", i)
            ref_out[i] = limits[i][0]
        elif (ref[i] > limits[i][1]):
            print("Limiting high", i)
            ref_out[i] = limits[i][1]
    return (ref_out)


ref = config.initial_joint_pos
waitRef = False
refbottle = yarp.Bottle()
while not stop:
    yarp_ctrl.update()

    while waitRef:
        # blocking first time
        refbottle = refPort.read()
        if config.nJoints == refbottle.size():
            dataOk = True
            for value in map(refbottle.get, range(refbottle.size())):
                if ((not value.isDouble()) and (not value.isInt())):
                    dataOk = False
            if dataOk:
                waitRef = False
                break
    else:
        refbottle = refPort.read(False)
    if refbottle:
        ref = array(
            map(yarp.Value.asDouble, map(refbottle.get,
                                         range(config.nJoints))))
        #print("New reference:", ref)
    inbottle = inPort.read(False)
    if inbottle:
        indata = array(
            map(yarp.Value.asDouble, map(inbottle.get,
                                         range(config.nJoints))))
        ref = check_limits(
            ref, indata
        )   # for the icub we have to check in every cycle the new limits
        # (they change according to the current position, and limit the ref
        # accordingly
        error = ref - indata
        outqdot = error * kp

        outbottle = outPort.prepare()
        outbottle.clear()
        map(outbottle.addDouble, outqdot)
        outPort.write(True)

        # Calculating if the target was reached
        joint_reached = [x < delta for x in error]
        all_reached = True
        for i in joint_reached:
            all_reached = all_reached and i

        reach_bottle = atGoalPort.prepare()
        reach_bottle.clear()
        if (all_reached):
            reach_bottle.addInt(1)
        else:
            reach_bottle.addInt(0)
        atGoalPort.write(True)
    else:
        yarp.Time.delay(0.01)

inPort.close()
refPort.close()
outPort.close()
atGoalPort.close()
yarp.Network.fini()
